import React from 'react';
import { Table, Typography, Card } from 'antd';

const { Title } = Typography;

const LTMfieldsToCompare = [
  'profiles',
];

const ASMfieldsToCompare = [
  'config_captured_at',
  'location',
  'vip',
  'pool_name',
  'irules',
  'host_header_data_groupt',
  'host_header_values',
  'persistance_profile_name',
  'security_logging_profiles'
];

function resolveValue(val) {
  if (val === null || val === undefined) return '-';
  if (typeof val === 'object') {
    if (Array.isArray(val)) {
      if (val.length === 0) return '-';
      if (val[0]?.data) return val[0].data;
      if (val[0]?.value) return val[0].value;
      return val[0];
    }
    if (val.data) return val.data;
    if (val.value) return [val.value];
    return JSON.stringify(val);
  }

  return [val.toString()];
}

function getWordSpans(base, comparison, index = 0) {
  return comparison.map((word, idx) => {
    if (idx === index) {
      const isSame = word === base;
      return (
        <span
          key={idx}
          className={isSame ? 'greenshade' : 'highlightdiff'}
          style={{ marginRight: '4px' }}
        >
          {base}
        </span>
      );
    }
    return null;
  });
}

const TransposedFqdnGrouped = ({ selectedVal, data }) => {
  if (!data || data.length === 0) return <p>No data to display.</p>;

  const fqdnKeys = data.map(item => item.device_name);

  function df(rowdata, addVal = '') {
    const columns = [
      {
        title: 'Field',
        dataIndex: 'field',
        render: () => <b>{rowdata.field}</b>,
        fixed: 'left'
      },
      ...fqdnKeys.map(fqdn => ({
        title: fqdn,
        width: "20%",
        dataIndex: fqdn,
        render: text => (
          Array.isArray(text)
            ? text.map((line, i) => <>{getWordSpans(line, rowdata[fqdn], i)}<br /></>)
            : getWordSpans(text, [rowdata[fqdn]])
        )
      }))
    ];

    return (
      <Card key={`${rowdata.field}-${addVal}`} bordered>
        <Title level={4} style={{ textTransform: 'uppercase' }}>
          {selectedVal} - {rowdata.field} {addVal ? `: ${addVal}` : ''}
        </Title>
        <Table
          dataSource={[rowdata]}
          columns={columns}
          pagination={false}
          rowKey="field"
          bordered
          scroll={{ x: 'max-content' }}
        />
      </Card>
    );
  }

  return (
    <div className="space-y-8">
      {(selectedVal === 'LTM' ? LTMfieldsToCompare : ASMfieldsToCompare).map(field => (
        <React.Fragment key={field}>
          {(() => {
            const tables = [];
            const row = { field };

            fqdnKeys.forEach((fqdn, idx) => {
              const tableRowVal = data[idx][field];

              if (
                typeof tableRowVal === 'object' &&
                ['PROFILES', 'IRULES'].includes(field.toUpperCase())
              ) {
                if (Array.isArray(tableRowVal)) {
                  tableRowVal.forEach((RValue, index) => {
                    const row2 = { field };
                    fqdnKeys.forEach((fqdn2, idx2) => {
                      const val = data[idx2][field][index];
                      row2[fqdn2] = resolveValue(val);
                    });
                    tables.push(df(row2, RValue?.value || `Item ${index + 1}`));
                  });
                }
              } else {
                const value = resolveValue(tableRowVal);
                row[fqdn] = value;
              }
            });

            if (tables.length === 0) {
              tables.push(df(row));
            }

            return tables;
          })()}
        </React.Fragment>
      ))}
    </div>
  );
};

export default TransposedFqdnGrouped;
